/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from './common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';


/**
 * AppStorageApi - axios parameter creator
 * @export
 */
export const AppStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageAddApp: async (app: string, platform: string, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('appStorageAddApp', 'app', app)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('appStorageAddApp', 'platform', platform)
            const localVarPath = `/core/{app}/{platform}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetAppWithVersion: async (app: string, platform: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('appStorageGetAppWithVersion', 'app', app)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('appStorageGetAppWithVersion', 'platform', platform)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('appStorageGetAppWithVersion', 'version', version)
            const localVarPath = `/core/{app}/{platform}/{version}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetApps: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/core`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetLatest: async (app: string, platform: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('appStorageGetLatest', 'app', app)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('appStorageGetLatest', 'platform', platform)
            const localVarPath = `/core/{app}/{platform}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} [format]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetLatestVersion: async (app: string, platform: string, format?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('appStorageGetLatestVersion', 'app', app)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('appStorageGetLatestVersion', 'platform', platform)
            const localVarPath = `/core/{app}/{platform}/version`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetVersions: async (app: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('appStorageGetVersions', 'app', app)
            const localVarPath = `/core/{app}/version`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppStorageApi - functional programming interface
 * @export
 */
export const AppStorageApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AppStorageApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageAddApp(app: string, platform: string, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageAddApp(app, platform, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageGetAppWithVersion(app: string, platform: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageGetAppWithVersion(app, platform, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageGetApps(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageGetApps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageGetLatest(app: string, platform: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageGetLatest(app, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} [format]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageGetLatestVersion(app: string, platform: string, format?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageGetLatestVersion(app, platform, format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appStorageGetVersions(app: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appStorageGetVersions(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppStorageApi - factory interface
 * @export
 */
export const AppStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppStorageApiFp(configuration)
    return {
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageAddApp(app: string, platform: string, body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.appStorageAddApp(app, platform, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetAppWithVersion(app: string, platform: string, version: string, options?: any): AxiosPromise<void> {
            return localVarFp.appStorageGetAppWithVersion(app, platform, version, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetApps(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.appStorageGetApps(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetLatest(app: string, platform: string, options?: any): AxiosPromise<void> {
            return localVarFp.appStorageGetLatest(app, platform, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} app
         * @param {string} platform
         * @param {string} [format]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetLatestVersion(app: string, platform: string, format?: string, options?: any): AxiosPromise<void> {
            return localVarFp.appStorageGetLatestVersion(app, platform, format, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appStorageGetVersions(app: string, options?: any): AxiosPromise<void> {
            return localVarFp.appStorageGetVersions(app, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppStorageApi - object-oriented interface
 * @export
 * @class AppStorageApi
 * @extends {BaseAPI}
 */
export class AppStorageApi extends BaseAPI {
    /**
     *
     * @param {string} app
     * @param {string} platform
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageAddApp(app: string, platform: string, body?: object, options?: any) {
        return AppStorageApiFp(this.configuration).appStorageAddApp(app, platform, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} app
     * @param {string} platform
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageGetAppWithVersion(app: string, platform: string, version: string, options?: any) {
        return AppStorageApiFp(this.configuration).appStorageGetAppWithVersion(app, platform, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageGetApps(options?: any) {
        return AppStorageApiFp(this.configuration).appStorageGetApps(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} app
     * @param {string} platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageGetLatest(app: string, platform: string, options?: any) {
        return AppStorageApiFp(this.configuration).appStorageGetLatest(app, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} app
     * @param {string} platform
     * @param {string} [format]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageGetLatestVersion(app: string, platform: string, format?: string, options?: any) {
        return AppStorageApiFp(this.configuration).appStorageGetLatestVersion(app, platform, format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStorageApi
     */
    public appStorageGetVersions(app: string, options?: any) {
        return AppStorageApiFp(this.configuration).appStorageGetVersions(app, options).then((request) => request(this.axios, this.basePath));
    }
}


