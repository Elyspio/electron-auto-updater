//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IAppsClient {
    /**
     * Returns all apps app
     */
    getApps(): Promise<string[]>;
    /**
     * Add a new version for this application
     * @param content (optional) 
     */
    add(app: string, version: string, arch: AppArch, content?: FileParameter | null | undefined): Promise<void>;
    /**
     * Delete a specific version for this application
     */
    delete(app: string, version: string, arch: AppArch): Promise<void>;
    /**
     * Get binary for this app/arch/version
     */
    getBinary(app: string, version: string, arch: AppArch): Promise<FileResponse>;
    /**
     * Get all versions for a specific arch
     */
    getLatestVersions(app: string): Promise<{ [key in keyof typeof AppArch]?: AppVersion; }>;
    /**
     * Get all versions for all arch for
     */
    getAllMetadata(app: string): Promise<AppMetadata[]>;
    /**
     * Get the latest version for this app
     */
    getLatestVersion(app: string): Promise<AppVersion>;
    /**
     * Get latest version for this arch
     */
    getLatestArchSpecificVersion(app: string, arch: AppArch): Promise<AppVersion>;
}

export class AppsClient implements IAppsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4000";

    }

    /**
     * Returns all apps app
     */
    getApps(  cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<string[]> {
        let url_ = this.baseUrl + "/api/apps";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetApps(_response);
        });
    }

    protected processGetApps(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<string[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * Add a new version for this application
     * @param content (optional) 
     */
    add(app: string, version: string, arch: AppArch, content?: FileParameter | null | undefined , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<void> {
        let url_ = this.baseUrl + "/api/apps/{app}/{arch}/{version}";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (arch === undefined || arch === null)
            throw new Error("The parameter 'arch' must be defined.");
        url_ = url_.replace("{arch}", encodeURIComponent("" + arch));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (content !== null && content !== undefined)
            content_.append("content", content.data, content.fileName ? content.fileName : "content");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Delete a specific version for this application
     */
    delete(app: string, version: string, arch: AppArch , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<void> {
        let url_ = this.baseUrl + "/api/apps/{app}/{arch}/{version}";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (arch === undefined || arch === null)
            throw new Error("The parameter 'arch' must be defined.");
        url_ = url_.replace("{arch}", encodeURIComponent("" + arch));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get binary for this app/arch/version
     */
    getBinary(app: string, version: string, arch: AppArch , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/apps/{app}/{arch}/{version}";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (arch === undefined || arch === null)
            throw new Error("The parameter 'arch' must be defined.");
        url_ = url_.replace("{arch}", encodeURIComponent("" + arch));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBinary(_response);
        });
    }

    protected processGetBinary(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Get all versions for a specific arch
     */
    getLatestVersions(app: string , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<{ [key in keyof typeof AppArch]?: AppVersion; }> {
        let url_ = this.baseUrl + "/api/apps/{app}/versions";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLatestVersions(_response);
        });
    }

    protected processGetLatestVersions(response: AxiosResponse): Promise<{ [key in keyof typeof AppArch]?: AppVersion; }> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<{ [key in keyof typeof AppArch]?: AppVersion; }>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<{ [key in keyof typeof AppArch]?: AppVersion; }>(null as any);
    }

    /**
     * Get all versions for all arch for
     */
    getAllMetadata(app: string , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<AppMetadata[]> {
        let url_ = this.baseUrl + "/api/apps/{app}";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllMetadata(_response);
        });
    }

    protected processGetAllMetadata(response: AxiosResponse): Promise<AppMetadata[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppMetadata[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppMetadata[]>(null as any);
    }

    /**
     * Get the latest version for this app
     */
    getLatestVersion(app: string , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<AppVersion> {
        let url_ = this.baseUrl + "/api/apps/{app}/versions/latest";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLatestVersion(_response);
        });
    }

    protected processGetLatestVersion(response: AxiosResponse): Promise<AppVersion> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppVersion>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppVersion>(null as any);
    }

    /**
     * Get latest version for this arch
     */
    getLatestArchSpecificVersion(app: string, arch: AppArch , cancelToken?: CancelToken | undefined, options?: AxiosRequestConfig): Promise<AppVersion> {
        let url_ = this.baseUrl + "/api/apps/{app}/{arch}/version";
        if (app === undefined || app === null)
            throw new Error("The parameter 'app' must be defined.");
        url_ = url_.replace("{app}", encodeURIComponent("" + app));
        if (arch === undefined || arch === null)
            throw new Error("The parameter 'arch' must be defined.");
        url_ = url_.replace("{arch}", encodeURIComponent("" + arch));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken,
            ...options ?? {}
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLatestArchSpecificVersion(_response);
        });
    }

    protected processGetLatestArchSpecificVersion(response: AxiosResponse): Promise<AppVersion> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppVersion>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppVersion>(null as any);
    }
}

export enum AppArch {
    Win32 = "Win32",
    Win64 = "Win64",
    LinuxDeb = "LinuxDeb",
    LinuxRpm = "LinuxRpm",
    LinuxSnap = "LinuxSnap",
}

export interface AppVersion {
    minor: number;
    major: number;
    revision: number;
    raw: string;
}

export interface AppMetadata {
    name: string;
    version: AppVersion;
    arch: AppArch;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}